{
	"openapi": "3.0.2",
	"paths": {
		"/intents/cost": {
			"post": {
				"description": "Calculates the cost of executing a route based on the provided user address and intent.",
				"summary": "Get Intent Cost",
				"tags": [],
				"parameters": [
					{
						"name": "x-api-key",
						"in": "header",
						"schema": {
							"type": "string",
							"description": "Rhinestone API key"
						}
					}
				],
				"requestBody": {
					"description": "Body",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"destinationChainId": {
										"type": "number",
										"minimum": 0,
										"description": "The ID of the target blockchain",
										"example": 8453
									},
									"tokenTransfers": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"tokenAddress": {
													"type": "string",
													"description": "The address of the token to be transferred",
													"example": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
												},
												"amount": {
													"type": "integer",
													"format": "int64",
													"description": "The amount of the token to be transferred (in smallest unit)",
													"example": "1000000"
												}
											},
											"required": ["tokenAddress"]
										},
										"description": "A list of token transfers"
									},
									"account": {
										"type": "object",
										"properties": {
											"address": {
												"type": "string",
												"description": "Smart account address",
												"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
											},
											"accountType": {
												"type": "string",
												"description": "Smart account type"
											},
											"setupOps": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"to": {
															"type": "string",
															"description": "Account deployment factory address",
															"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
														},
														"data": {
															"type": "string",
															"pattern": "^0x[a-fA-F0-9]*$",
															"description": "Account deployment data",
															"example": "0x..."
														}
													},
													"required": ["to", "data"]
												},
												"description": "Setup operations for the smart account"
											},
											"emissaryConfig": {
												"type": "object",
												"properties": {
													"configId": {
														"type": "number",
														"maximum": 255,
														"description": "Unique identifier for the emissary configuration",
														"example": "42"
													},
													"validatorAddress": {
														"type": "string",
														"description": "Address of the validator contract",
														"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
													},
													"emissaryAddress": {
														"type": "string",
														"description": "Address of the emissary contract",
														"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
													},
													"emissaryEnable": {
														"type": "object",
														"properties": {
															"allocatorSig": {
																"type": "string",
																"pattern": "^0x[a-fA-F0-9]*$",
																"description": "Signature of the allocator",
																"example": "0x..."
															},
															"userSig": {
																"type": "string",
																"pattern": "^0x[a-fA-F0-9]*$",
																"description": "Signature of the user",
																"example": "0x..."
															},
															"expires": {
																"type": "integer",
																"format": "int64",
																"description": "Expiration timestamp",
																"example": "1733493192"
															},
															"nonce": {
																"type": "integer",
																"format": "int64",
																"description": "Nonce",
																"example": "0"
															},
															"allChainIds": {},
															"chainIndex": {
																"type": "integer",
																"format": "int64",
																"description": "Chain index",
																"example": "0"
															}
														},
														"required": [
															"allocatorSig",
															"userSig",
															"expires",
															"nonce",
															"allChainIds",
															"chainIndex"
														],
														"description": "Emissary enable data",
														"example": {
															"allocatorSig": "0x...",
															"userSig": "0x..."
														}
													},
													"emissaryConfig": {
														"type": "object",
														"properties": {
															"allocator": {
																"default": "0x064d52ee04da194f26c8faf7b5e455c842fa70db",
																"type": "string",
																"description": "Address of the allocator",
																"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
															},
															"scope": {
																"default": 0,
																"type": "number",
																"description": "Scope of the emissary",
																"example": 1
															},
															"resetPeriod": {
																"default": 6,
																"type": "number",
																"description": "Reset period of the emissary",
																"example": 1
															},
															"validator": {
																"type": "string",
																"description": "Address of the validator",
																"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
															},
															"validatorConfig": {
																"type": "string",
																"pattern": "^0x[a-fA-F0-9]*$",
																"description": "Validator configuration",
																"example": "0x..."
															}
														},
														"required": ["validator", "validatorConfig"],
														"description": "Emissary configuration",
														"example": {
															"allocator": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
														}
													}
												},
												"required": [
													"configId",
													"validatorAddress",
													"emissaryAddress",
													"emissaryEnable",
													"emissaryConfig"
												],
												"description": "Emissary configuration for the smart account"
											},
											"delegations": {
												"type": "object",
												"additionalProperties": {
													"type": "object",
													"properties": {
														"contract": {
															"type": "string",
															"description": "address of contract to which delegation on behalf of sponsor will be assumed for given chain ID"
														}
													},
													"required": ["contract"]
												},
												"description": "Per-chain specific map to delegated contract address for 7702 delegations. Chain 0 means its default fallback"
											}
										},
										"required": ["address", "accountType"],
										"description": "Smart account type and optional init data if account is not deployed"
									},
									"destinationExecutions": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"to": {
													"type": "string",
													"description": "Target contract address for execution",
													"example": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
												},
												"value": {
													"type": "integer",
													"format": "int64",
													"description": "Amount of ETH (in wei) sent in the execution",
													"example": "0"
												},
												"data": {
													"type": "string",
													"pattern": "^0x[a-fA-F0-9]*$",
													"description": "Encoded function call data",
													"example": "0xa9059cbb000000000000000000000000579d5631f76126991c00fb8fe5467fa9d49e5f6a00000000000000000000000000000000000000000000000000000000000f4240"
												}
											},
											"required": ["to", "value", "data"]
										},
										"description": "Execution calls on the target chain. Cannot be used with userOp"
									},
									"destinationGasUnits": {
										"type": "integer",
										"format": "int64",
										"description": "The gas units for the target chain",
										"example": "100000"
									},
									"accountAccessList": {
										"oneOf": [
											{
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"chainId": {
															"type": "number"
														},
														"tokenAddress": {
															"type": "string"
														}
													},
													"required": ["chainId", "tokenAddress"]
												}
											},
											{
												"type": "object",
												"properties": {
													"chainIds": {
														"type": "array",
														"items": {
															"type": "number"
														}
													},
													"tokens": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"chainTokens": {
														"type": "object",
														"additionalProperties": {
															"type": "array",
															"items": {
																"type": "string"
															}
														}
													},
													"exclude": {
														"type": "object",
														"properties": {
															"chainIds": {
																"type": "array",
																"items": {
																	"type": "number"
																}
															},
															"tokens": {
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"chainTokens": {
																"type": "object",
																"additionalProperties": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													}
												}
											}
										],
										"description": "Account access list specifying which chains and tokens an account may access"
									},
									"options": {
										"type": "object",
										"properties": {
											"topupCompact": {
												"default": false,
												"type": "boolean",
												"description": "Whether to top up the compact locked balance using unlocked funds",
												"example": true
											},
											"settlementLayers": {
												"type": "array",
												"items": {
													"type": "string",
													"enum": ["ACROSS", "ECO", "RELAY"]
												},
												"description": "The settlement layer to be used to settle intents",
												"example": ["ECO"]
											},
											"sponsorSettings": {
												"type": "object",
												"properties": {
													"gasSponsored": {
														"default": false,
														"type": "boolean",
														"description": "Whether to sponsor gas for the intent",
														"example": true
													},
													"bridgeFeesSponsored": {
														"default": false,
														"type": "boolean",
														"description": "Whether to sponsor bridge fees for the intent"
													},
													"swapFeesSponsored": {
														"default": false,
														"type": "boolean",
														"description": "Whether to sponsor swap fees for the intent"
													}
												},
												"description": "Sponsor settings for the intent",
												"example": {
													"gasSponsored": true,
													"bridgeFeesSponsored": true,
													"swapFeesSponsored": true
												}
											},
											"feeToken": {
												"type": "string",
												"enum": [
													"ETH",
													"WETH",
													"USDC",
													"USDT",
													"POL",
													"WPOL",
													"S",
													"WS"
												]
											}
										}
									}
								},
								"required": [
									"destinationChainId",
									"tokenTransfers",
									"account",
									"options"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "200",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"type": "object",
											"properties": {
												"hasFulfilledAll": {
													"type": "boolean",
													"enum": [true],
													"description": "Indicates that all tokens have been fulfilled"
												},
												"tokensSpent": {
													"type": "object",
													"additionalProperties": {
														"type": "object",
														"additionalProperties": {
															"type": "object",
															"properties": {
																"locked": {
																	"type": "integer",
																	"format": "int64"
																},
																"unlocked": {
																	"type": "integer",
																	"format": "int64"
																}
															},
															"required": ["locked", "unlocked"]
														}
													}
												},
												"tokensReceived": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"tokenAddress": {
																"type": "string"
															},
															"amountSpent": {
																"type": "integer",
																"format": "int64"
															},
															"targetAmount": {
																"type": "integer",
																"format": "int64"
															},
															"fee": {
																"type": "integer",
																"format": "int64"
															},
															"hasFulfilled": {
																"type": "boolean"
															}
														},
														"required": [
															"tokenAddress",
															"amountSpent",
															"targetAmount",
															"fee",
															"hasFulfilled"
														]
													}
												}
											},
											"required": [
												"hasFulfilledAll",
												"tokensSpent",
												"tokensReceived"
											]
										},
										{
											"type": "object",
											"properties": {
												"hasFulfilledAll": {
													"type": "boolean",
													"enum": [false],
													"description": "Indicates that not all tokens have been fulfilled"
												},
												"tokenShortfall": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"tokenAddress": {
																"type": "string",
																"description": "Address of the token that has not been fulfilled",
																"example": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
															},
															"destinationAmount": {
																"type": "integer",
																"format": "int64",
																"description": "Target amount of the token that has not been fulfilled",
																"example": "1000000"
															},
															"amountSpent": {
																"type": "integer",
																"format": "int64",
																"description": "Amount spent on the token that has not been fulfilled",
																"example": "500000"
															},
															"fee": {
																"type": "integer",
																"format": "int64",
																"description": "Fee associated with the token that has not been fulfilled",
																"example": "10000"
															},
															"tokenSymbol": {
																"type": "string",
																"description": "Symbol of the token that has not been fulfilled",
																"example": "USDC"
															},
															"tokenDecimals": {
																"type": "number",
																"minimum": 0,
																"description": "Number of decimal places for the token",
																"example": 6
															}
														},
														"required": [
															"tokenAddress",
															"destinationAmount",
															"amountSpent",
															"fee",
															"tokenSymbol",
															"tokenDecimals"
														]
													},
													"description": "List of tokens that have not been fulfilled"
												},
												"totalTokenShortfallInUSD": {
													"type": "number",
													"minimum": 0,
													"description": "Total shortfall of tokens in USD",
													"example": 500
												}
											},
											"required": [
												"hasFulfilledAll",
												"tokenShortfall",
												"totalTokenShortfallInUSD"
											]
										}
									],
									"description": "Successfully retrieved the order path"
								}
							}
						}
					},
					"400": {
						"description": "400",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message for invalid request parameters",
											"example": "Invalid user address format"
										}
									},
									"required": ["error"],
									"description": "Invalid request parameters"
								}
							}
						}
					},
					"500": {
						"description": "500",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message describing the server-side issue",
											"example": "An unknown error occurred"
										}
									},
									"required": ["error"],
									"description": "Server error"
								}
							}
						}
					}
				}
			}
		},
		"/intents/route": {
			"post": {
				"description": "Retrieves the route token transfers and target executions based on the provided user address and intent.",
				"summary": "Get Intent Route",
				"tags": [],
				"parameters": [
					{
						"name": "x-api-key",
						"in": "header",
						"schema": {
							"type": "string",
							"description": "Rhinestone API key"
						}
					}
				],
				"requestBody": {
					"description": "Body",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"destinationChainId": {
										"type": "number",
										"minimum": 0,
										"description": "The ID of the target blockchain",
										"example": 8453
									},
									"tokenTransfers": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"tokenAddress": {
													"type": "string",
													"description": "The address of the token to be transferred",
													"example": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
												},
												"amount": {
													"type": "integer",
													"format": "int64",
													"description": "The amount of the token to be transferred (in smallest unit)",
													"example": "1000000"
												}
											},
											"required": ["tokenAddress", "amount"]
										},
										"description": "A list of token transfers"
									},
									"account": {
										"type": "object",
										"properties": {
											"address": {
												"type": "string",
												"description": "Smart account address",
												"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
											},
											"accountType": {
												"type": "string",
												"description": "Smart account type"
											},
											"setupOps": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"to": {
															"type": "string",
															"description": "Account deployment factory address",
															"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
														},
														"data": {
															"type": "string",
															"pattern": "^0x[a-fA-F0-9]*$",
															"description": "Account deployment data",
															"example": "0x..."
														}
													},
													"required": ["to", "data"]
												},
												"description": "Setup operations for the smart account"
											},
											"emissaryConfig": {
												"type": "object",
												"properties": {
													"configId": {
														"type": "number",
														"maximum": 255,
														"description": "Unique identifier for the emissary configuration",
														"example": "42"
													},
													"validatorAddress": {
														"type": "string",
														"description": "Address of the validator contract",
														"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
													},
													"emissaryAddress": {
														"type": "string",
														"description": "Address of the emissary contract",
														"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
													},
													"emissaryEnable": {
														"type": "object",
														"properties": {
															"allocatorSig": {
																"type": "string",
																"pattern": "^0x[a-fA-F0-9]*$",
																"description": "Signature of the allocator",
																"example": "0x..."
															},
															"userSig": {
																"type": "string",
																"pattern": "^0x[a-fA-F0-9]*$",
																"description": "Signature of the user",
																"example": "0x..."
															},
															"expires": {
																"type": "integer",
																"format": "int64",
																"description": "Expiration timestamp",
																"example": "1733493192"
															},
															"nonce": {
																"type": "integer",
																"format": "int64",
																"description": "Nonce",
																"example": "0"
															},
															"allChainIds": {},
															"chainIndex": {
																"type": "integer",
																"format": "int64",
																"description": "Chain index",
																"example": "0"
															}
														},
														"required": [
															"allocatorSig",
															"userSig",
															"expires",
															"nonce",
															"allChainIds",
															"chainIndex"
														],
														"description": "Emissary enable data",
														"example": {
															"allocatorSig": "0x...",
															"userSig": "0x..."
														}
													},
													"emissaryConfig": {
														"type": "object",
														"properties": {
															"allocator": {
																"default": "0x064d52ee04da194f26c8faf7b5e455c842fa70db",
																"type": "string",
																"description": "Address of the allocator",
																"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
															},
															"scope": {
																"default": 0,
																"type": "number",
																"description": "Scope of the emissary",
																"example": 1
															},
															"resetPeriod": {
																"default": 6,
																"type": "number",
																"description": "Reset period of the emissary",
																"example": 1
															},
															"validator": {
																"type": "string",
																"description": "Address of the validator",
																"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
															},
															"validatorConfig": {
																"type": "string",
																"pattern": "^0x[a-fA-F0-9]*$",
																"description": "Validator configuration",
																"example": "0x..."
															}
														},
														"required": ["validator", "validatorConfig"],
														"description": "Emissary configuration",
														"example": {
															"allocator": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
														}
													}
												},
												"required": [
													"configId",
													"validatorAddress",
													"emissaryAddress",
													"emissaryEnable",
													"emissaryConfig"
												],
												"description": "Emissary configuration for the smart account"
											},
											"delegations": {
												"type": "object",
												"additionalProperties": {
													"type": "object",
													"properties": {
														"contract": {
															"type": "string",
															"description": "address of contract to which delegation on behalf of sponsor will be assumed for given chain ID"
														}
													},
													"required": ["contract"]
												},
												"description": "Per-chain specific map to delegated contract address for 7702 delegations. Chain 0 means its default fallback"
											}
										},
										"required": ["address", "accountType"],
										"description": "Smart account type and optional init data if account is not deployed"
									},
									"destinationExecutions": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"to": {
													"type": "string",
													"description": "Target contract address for execution",
													"example": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913"
												},
												"value": {
													"type": "integer",
													"format": "int64",
													"description": "Amount of ETH (in wei) sent in the execution",
													"example": "0"
												},
												"data": {
													"type": "string",
													"pattern": "^0x[a-fA-F0-9]*$",
													"description": "Encoded function call data",
													"example": "0xa9059cbb000000000000000000000000579d5631f76126991c00fb8fe5467fa9d49e5f6a00000000000000000000000000000000000000000000000000000000000f4240"
												}
											},
											"required": ["to", "value", "data"]
										},
										"description": "Execution calls on the target chain. Cannot be used with userOp"
									},
									"destinationGasUnits": {
										"type": "integer",
										"format": "int64",
										"description": "The gas units for the target chain",
										"example": "100000"
									},
									"accountAccessList": {
										"oneOf": [
											{
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"chainId": {
															"type": "number"
														},
														"tokenAddress": {
															"type": "string"
														}
													},
													"required": ["chainId", "tokenAddress"]
												}
											},
											{
												"type": "object",
												"properties": {
													"chainIds": {
														"type": "array",
														"items": {
															"type": "number"
														}
													},
													"tokens": {
														"type": "array",
														"items": {
															"type": "string"
														}
													},
													"chainTokens": {
														"type": "object",
														"additionalProperties": {
															"type": "array",
															"items": {
																"type": "string"
															}
														}
													},
													"exclude": {
														"type": "object",
														"properties": {
															"chainIds": {
																"type": "array",
																"items": {
																	"type": "number"
																}
															},
															"tokens": {
																"type": "array",
																"items": {
																	"type": "string"
																}
															},
															"chainTokens": {
																"type": "object",
																"additionalProperties": {
																	"type": "array",
																	"items": {
																		"type": "string"
																	}
																}
															}
														}
													}
												}
											}
										],
										"description": "Account access list specifying which chains and tokens an account may access"
									},
									"options": {
										"type": "object",
										"properties": {
											"topupCompact": {
												"default": false,
												"type": "boolean",
												"description": "Whether to top up the compact locked balance using unlocked funds",
												"example": true
											},
											"settlementLayers": {
												"type": "array",
												"items": {
													"type": "string",
													"enum": ["ACROSS", "ECO", "RELAY"]
												},
												"description": "The settlement layer to be used to settle intents",
												"example": ["ECO"]
											},
											"sponsorSettings": {
												"type": "object",
												"properties": {
													"gasSponsored": {
														"default": false,
														"type": "boolean",
														"description": "Whether to sponsor gas for the intent",
														"example": true
													},
													"bridgeFeesSponsored": {
														"default": false,
														"type": "boolean",
														"description": "Whether to sponsor bridge fees for the intent"
													},
													"swapFeesSponsored": {
														"default": false,
														"type": "boolean",
														"description": "Whether to sponsor swap fees for the intent"
													}
												},
												"description": "Sponsor settings for the intent",
												"example": {
													"gasSponsored": true,
													"bridgeFeesSponsored": true,
													"swapFeesSponsored": true
												}
											},
											"feeToken": {
												"type": "string",
												"enum": [
													"ETH",
													"WETH",
													"USDC",
													"USDT",
													"POL",
													"WPOL",
													"S",
													"WS"
												]
											}
										},
										"description": "Intent options",
										"example": {
											"topupCompact": true,
											"settlementLayers": ["ECO"],
											"sponsorSettings": {
												"gasSponsored": true,
												"bridgeFeesSponsored": true,
												"swapFeesSponsored": true
											},
											"feeToken": "USDC"
										}
									}
								},
								"required": ["destinationChainId", "tokenTransfers", "account"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "200",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"intentOp": {
											"type": "object",
											"properties": {
												"sponsor": {
													"type": "string",
													"description": "Address sponsoring the transaction",
													"example": "0x8a310b9085faF5d9464D84C3d9a7BE3b28c94531"
												},
												"nonce": {
													"type": "integer",
													"format": "int64",
													"description": "Transaction nonce",
													"example": "0"
												},
												"expires": {
													"type": "integer",
													"format": "int64",
													"description": "Expiration timestamp",
													"example": "1733493192"
												},
												"elements": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"arbiter": {
																"type": "string",
																"description": "Arbiter address for the element",
																"example": "0x8a310b9085faF5d9464D84C3d9a7BE3b28c94531"
															},
															"chainId": {
																"type": "integer",
																"format": "int64",
																"description": "Chain ID where the element is executed",
																"example": "1"
															},
															"idsAndAmounts": {
																"description": "Array of [tokenId, amount] pairs",
																"example": [["1", "1000000"], ["2", "2000000"]]
															},
															"spendTokens": {
																"description": "Array of [tokenId, amount] pairs that were effectively used as resource locks",
																"example": [["1", "1000000"], ["2", "2000000"]]
															},
															"mandate": {
																"type": "object",
																"properties": {
																	"recipient": {
																		"type": "string",
																		"description": "Recipient address for the mandate",
																		"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																	},
																	"tokenOut": {
																		"description": "Array of [tokenId, amount] pairs for output tokens",
																		"example": [
																			["1", "1000000"],
																			["2", "2000000"]
																		]
																	},
																	"destinationChainId": {
																		"type": "integer",
																		"format": "int64",
																		"description": "Target chain ID for the mandate",
																		"example": 8453
																	},
																	"fillDeadline": {
																		"type": "integer",
																		"format": "int64",
																		"description": "Deadline timestamp for filling the mandate",
																		"example": "1733493192"
																	},
																	"preClaimOps": {
																		"description": "Array of executions to perform before claiming"
																	},
																	"destinationOps": {
																		"description": "Array of executions to perform on the target chain"
																	},
																	"qualifier": {
																		"type": "object",
																		"properties": {
																			"settlementContext": {
																				"type": "object",
																				"properties": {
																					"settlementLayer": {
																						"type": "string",
																						"enum": [
																							"SAME_CHAIN",
																							"ACROSS",
																							"ECO",
																							"RELAY"
																						],
																						"description": "Settlement layer for the qualifier",
																						"example": "ACROSS"
																					},
																					"usingJIT": {
																						"type": "boolean",
																						"description": "Whether to use JIT for the qualifier. Only valid for ACROSS and SAME_CHAIN",
																						"example": true
																					},
																					"using7579": {
																						"type": "boolean",
																						"description": "Whether to use 7579 for the qualifier. Only valid for ACROSS",
																						"example": true
																					},
																					"requestId": {
																						"type": "string",
																						"description": "Relay settlement layer metadata to be broadcasted"
																					}
																				},
																				"required": ["settlementLayer"]
																			},
																			"encodedVal": {
																				"type": "string",
																				"pattern": "^0x[a-fA-F0-9]*$",
																				"description": "Encoded qualification value",
																				"example": "0x..."
																			}
																		},
																		"required": [
																			"settlementContext",
																			"encodedVal"
																		],
																		"description": "Qualification data for the mandate"
																	},
																	"v": {
																		"type": "number",
																		"description": "Validation mode identifier"
																	},
																	"minGas": {
																		"type": "integer",
																		"format": "int64",
																		"description": "Mininimum gas for preclaim ops"
																	}
																},
																"required": [
																	"recipient",
																	"tokenOut",
																	"destinationChainId",
																	"fillDeadline",
																	"preClaimOps",
																	"destinationOps",
																	"qualifier",
																	"v",
																	"minGas"
																],
																"description": "Mandate containing execution details"
															},
															"beforeFill": {
																"type": "boolean"
															}
														},
														"required": [
															"arbiter",
															"chainId",
															"idsAndAmounts",
															"spendTokens",
															"mandate"
														]
													},
													"description": "Array of execution elements"
												},
												"serverSignature": {
													"type": "string",
													"pattern": "^[0-9a-f]{64}$",
													"description": "Intent operation HMAC digest",
													"example": "0x..."
												},
												"signedMetadata": {
													"type": "object",
													"properties": {
														"fees": {
															"type": "object",
															"properties": {
																"protocolFees": {
																	"type": "object",
																	"additionalProperties": {
																		"type": "integer",
																		"format": "int64"
																	},
																	"description": "Protocol fees for the intent",
																	"example": {
																		"0x8a310b9085faF5d9464D84C3d9a7BE3b28c94531": 1000000000000000000
																	}
																},
																"sponsorFee": {
																	"type": "object",
																	"properties": {
																		"relayer": {
																			"type": "number",
																			"description": "Relayer fee for the intent",
																			"example": 0.01
																		},
																		"protocol": {
																			"type": "number",
																			"description": "Protocol fee for the intent",
																			"example": 0.01
																		}
																	},
																	"description": "Sponsor fee for the intent",
																	"example": {
																		"relayer": 0.01,
																		"protocol": 0.01
																	}
																}
															}
														},
														"tokenPrices": {
															"type": "object",
															"additionalProperties": {
																"type": "number"
															},
															"description": "Token prices in USD",
															"example": {
																"USDC": 1,
																"WETH": 2000
															}
														},
														"gasPrices": {
															"type": "object",
															"additionalProperties": {
																"type": "integer",
																"format": "int64"
															},
															"description": "Gas prices per chain in wei",
															"example": {
																"1": "20000000000",
																"10": "1000000000"
															}
														},
														"opGasParams": {
															"nullable": true,
															"description": "Optimism network gas parameters per chain",
															"example": {
																"10": {
																	"l1BaseFee": "100",
																	"l1BlobBaseFee": "100",
																	"baseFeeScalar": "100",
																	"blobFeeScalar": "100"
																}
															}
														},
														"account": {
															"type": "object",
															"properties": {
																"address": {
																	"type": "string",
																	"description": "Smart account address",
																	"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																},
																"accountType": {
																	"type": "string",
																	"description": "Smart account type"
																},
																"setupOps": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"to": {
																				"type": "string",
																				"description": "Account deployment factory address",
																				"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																			},
																			"data": {
																				"type": "string",
																				"pattern": "^0x[a-fA-F0-9]*$",
																				"description": "Account deployment data",
																				"example": "0x..."
																			}
																		},
																		"required": ["to", "data"]
																	},
																	"description": "Setup operations for the smart account"
																},
																"emissaryConfig": {
																	"type": "object",
																	"properties": {
																		"configId": {
																			"type": "number",
																			"maximum": 255,
																			"description": "Unique identifier for the emissary configuration",
																			"example": "42"
																		},
																		"validatorAddress": {
																			"type": "string",
																			"description": "Address of the validator contract",
																			"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																		},
																		"emissaryAddress": {
																			"type": "string",
																			"description": "Address of the emissary contract",
																			"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																		},
																		"emissaryEnable": {
																			"type": "object",
																			"properties": {
																				"allocatorSig": {
																					"type": "string",
																					"pattern": "^0x[a-fA-F0-9]*$",
																					"description": "Signature of the allocator",
																					"example": "0x..."
																				},
																				"userSig": {
																					"type": "string",
																					"pattern": "^0x[a-fA-F0-9]*$",
																					"description": "Signature of the user",
																					"example": "0x..."
																				},
																				"expires": {
																					"type": "integer",
																					"format": "int64",
																					"description": "Expiration timestamp",
																					"example": "1733493192"
																				},
																				"nonce": {
																					"type": "integer",
																					"format": "int64",
																					"description": "Nonce",
																					"example": "0"
																				},
																				"allChainIds": {},
																				"chainIndex": {
																					"type": "integer",
																					"format": "int64",
																					"description": "Chain index",
																					"example": "0"
																				}
																			},
																			"required": [
																				"allocatorSig",
																				"userSig",
																				"expires",
																				"nonce",
																				"allChainIds",
																				"chainIndex"
																			],
																			"description": "Emissary enable data",
																			"example": {
																				"allocatorSig": "0x...",
																				"userSig": "0x..."
																			}
																		},
																		"emissaryConfig": {
																			"type": "object",
																			"properties": {
																				"allocator": {
																					"default": "0x064d52ee04da194f26c8faf7b5e455c842fa70db",
																					"type": "string",
																					"description": "Address of the allocator",
																					"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																				},
																				"scope": {
																					"default": 0,
																					"type": "number",
																					"description": "Scope of the emissary",
																					"example": 1
																				},
																				"resetPeriod": {
																					"default": 6,
																					"type": "number",
																					"description": "Reset period of the emissary",
																					"example": 1
																				},
																				"validator": {
																					"type": "string",
																					"description": "Address of the validator",
																					"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																				},
																				"validatorConfig": {
																					"type": "string",
																					"pattern": "^0x[a-fA-F0-9]*$",
																					"description": "Validator configuration",
																					"example": "0x..."
																				}
																			},
																			"required": [
																				"validator",
																				"validatorConfig"
																			],
																			"description": "Emissary configuration",
																			"example": {
																				"allocator": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																			}
																		}
																	},
																	"required": [
																		"configId",
																		"validatorAddress",
																		"emissaryAddress",
																		"emissaryEnable",
																		"emissaryConfig"
																	],
																	"description": "Emissary configuration for the smart account"
																},
																"accountContext": {
																	"type": "object",
																	"additionalProperties": {
																		"discriminator": {
																			"propertyName": "accountType"
																		},
																		"oneOf": [
																			{
																				"type": "object",
																				"properties": {
																					"accountType": {
																						"type": "string",
																						"enum": ["eoa"],
																						"description": "Type of the account",
																						"example": "eoa"
																					}
																				},
																				"required": ["accountType"],
																				"additionalProperties": false
																			},
																			{
																				"type": "object",
																				"properties": {
																					"accountType": {
																						"type": "string",
																						"enum": ["smartAccount"],
																						"description": "Type of the account",
																						"example": "smartAccount"
																					},
																					"isDeployed": {
																						"type": "boolean",
																						"description": "Whether the account is deployed on this chain",
																						"example": true
																					},
																					"isERC7579": {
																						"type": "boolean",
																						"description": "Whether the account supports ERC7579 standard",
																						"example": true
																					},
																					"erc7579AccountType": {
																						"type": "string",
																						"enum": [
																							"Safe",
																							"Kernel",
																							"Nexus",
																							"Prime"
																						],
																						"description": "Type of ERC7579 account",
																						"example": "Safe"
																					},
																					"erc7579AccountVersion": {
																						"type": "string",
																						"description": "Version of the ERC7579 account",
																						"example": "1.0.0"
																					}
																				},
																				"required": [
																					"accountType",
																					"isDeployed",
																					"isERC7579"
																				],
																				"additionalProperties": false
																			}
																		]
																	},
																	"description": "Account status per chain"
																},
																"requiredDelegations": {
																	"type": "object",
																	"additionalProperties": {
																		"type": "object",
																		"properties": {
																			"contract": {
																				"type": "string",
																				"description": "address of contract to which delegation on behalf of sponsor will be assumed for given chain ID"
																			}
																		},
																		"required": ["contract"]
																	},
																	"description": "Map of chain -> EOA and delegated address required for user to sign for 7702 authorizations"
																}
															},
															"required": [
																"address",
																"accountType",
																"accountContext"
															]
														},
														"quotes": {
															"nullable": true
														}
													},
													"required": ["tokenPrices", "gasPrices", "account"],
													"description": "Signed metadata containing prices, fees, and gas parameters"
												},
												"signedAuthorizations": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"chainId": {
																"type": "number",
																"description": "Chain ID for EIP-7702 delegation, 0 means it can be applied to any chain",
																"example": 8453
															},
															"address": {
																"type": "string",
																"description": "Address of the delegate for EIP-7702 delegation",
																"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
															},
															"nonce": {
																"type": "number",
																"description": "Nonce for EIP-7702 delegation",
																"example": "0"
															},
															"yParity": {
																"type": "number",
																"description": "Y parity for EIP-7702 delegation",
																"example": 27
															},
															"r": {
																"type": "string",
																"pattern": "^0x[a-fA-F0-9]*$",
																"description": "R value for EIP-7702 delegation",
																"example": "0x..."
															},
															"s": {
																"type": "string",
																"pattern": "^0x[a-fA-F0-9]*$",
																"description": "S value for EIP-7702 delegation",
																"example": "0x..."
															}
														},
														"required": [
															"chainId",
															"address",
															"nonce",
															"yParity",
															"r",
															"s"
														]
													},
													"description": "List of 7702 authorizations signed by EOA matching sponsor"
												}
											},
											"required": [
												"sponsor",
												"nonce",
												"expires",
												"elements",
												"serverSignature",
												"signedMetadata"
											],
											"description": "The order bundle containing multi-chain execution details with pricing metadata"
										},
										"intentCost": {
											"type": "object",
											"properties": {
												"tokensSpent": {
													"type": "object",
													"additionalProperties": {
														"type": "object",
														"additionalProperties": {
															"type": "object",
															"properties": {
																"locked": {
																	"type": "integer",
																	"format": "int64"
																},
																"unlocked": {
																	"type": "integer",
																	"format": "int64"
																}
															},
															"required": ["locked", "unlocked"]
														}
													},
													"description": "Tokens spent in the transaction"
												},
												"tokensReceived": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"tokenAddress": {
																"type": "string"
															},
															"amountSpent": {
																"type": "integer",
																"format": "int64"
															},
															"targetAmount": {
																"type": "integer",
																"format": "int64"
															},
															"fee": {
																"type": "integer",
																"format": "int64"
															},
															"hasFulfilled": {
																"type": "boolean"
															}
														},
														"required": [
															"tokenAddress",
															"amountSpent",
															"targetAmount",
															"fee",
															"hasFulfilled"
														]
													},
													"description": "Tokens received in the transaction"
												}
											},
											"required": ["tokensSpent", "tokensReceived"],
											"description": "Cost breakdown for the intent"
										}
									},
									"required": ["intentOp", "intentCost"],
									"description": "Successfully retrieved the route"
								}
							}
						}
					},
					"400": {
						"description": "400",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message for invalid request parameters",
											"example": "Invalid user address format"
										}
									},
									"required": ["error"],
									"description": "Invalid request parameters"
								}
							}
						}
					},
					"500": {
						"description": "500",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message describing the server-side issue",
											"example": "An unknown error occurred"
										}
									},
									"required": ["error"],
									"description": "Server error"
								}
							}
						}
					}
				}
			}
		},
		"/withdrawals": {
			"post": {
				"description": "Gets the orchestrator signature to perform a withdrawal from The Compact",
				"summary": "Request Single Withdrawal",
				"tags": ["Withdrawals"],
				"parameters": [
					{
						"name": "x-api-key",
						"in": "header",
						"schema": {
							"type": "string",
							"description": "Rhinestone API key"
						}
					}
				],
				"requestBody": {
					"description": "Body",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"account": {
										"type": "string"
									},
									"chainId": {
										"type": "number"
									},
									"tokenAddress": {
										"type": "string"
									},
									"amount": {
										"type": "integer",
										"format": "int64"
									},
									"recipient": {
										"type": "string"
									}
								},
								"required": [
									"account",
									"chainId",
									"tokenAddress",
									"amount",
									"recipient"
								]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "200",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"allocatorData": {
											"type": "string",
											"pattern": "^0x[a-fA-F0-9]*$"
										},
										"transferDetails": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer",
													"format": "int64"
												},
												"nonce": {
													"type": "integer",
													"format": "int64"
												},
												"expires": {
													"type": "integer",
													"format": "int64"
												},
												"recipients": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"claimant": {
																"type": "integer",
																"format": "int64"
															},
															"amount": {
																"type": "integer",
																"format": "int64"
															}
														},
														"required": ["claimant", "amount"]
													}
												}
											},
											"required": ["id", "nonce", "expires", "recipients"]
										}
									},
									"required": ["allocatorData", "transferDetails"],
									"description": "Successfully retrieved a compact signature"
								}
							}
						}
					},
					"400": {
						"description": "400",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message for invalid request parameters",
											"example": "Invalid user address format"
										}
									},
									"required": ["error"],
									"description": "Invalid request parameters"
								}
							}
						}
					},
					"500": {
						"description": "500",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message describing the server-side issue",
											"example": "An unknown error occurred"
										}
									},
									"required": ["error"],
									"description": "Server error"
								}
							}
						}
					}
				}
			}
		},
		"/batch-withdrawals": {
			"post": {
				"description": "Gets the orchestrator signature to perform a compact withdrawal",
				"summary": "Request Batch Withdrawals",
				"tags": ["Withdrawals"],
				"parameters": [
					{
						"name": "x-api-key",
						"in": "header",
						"schema": {
							"type": "string",
							"description": "Rhinestone API key"
						}
					}
				],
				"requestBody": {
					"description": "Body",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"account": {
										"type": "string"
									},
									"chainId": {
										"type": "number"
									},
									"transfers": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"recipient": {
													"type": "string"
												},
												"tokenAddress": {
													"type": "string"
												},
												"amount": {
													"type": "integer",
													"format": "int64"
												}
											},
											"required": ["recipient", "tokenAddress", "amount"]
										}
									}
								},
								"required": ["account", "chainId", "transfers"]
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "200",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"allocatorData": {
											"type": "string",
											"pattern": "^0x[a-fA-F0-9]*$"
										},
										"batchTransferDetails": {
											"type": "object",
											"properties": {
												"nonce": {
													"type": "integer",
													"format": "int64"
												},
												"expires": {
													"type": "integer",
													"format": "int64"
												},
												"transfers": {
													"type": "array",
													"items": {
														"type": "object",
														"properties": {
															"id": {
																"type": "integer",
																"format": "int64"
															},
															"portions": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"claimant": {
																			"type": "integer",
																			"format": "int64"
																		},
																		"amount": {
																			"type": "integer",
																			"format": "int64"
																		}
																	},
																	"required": ["claimant", "amount"]
																}
															}
														},
														"required": ["id", "portions"]
													}
												}
											},
											"required": ["nonce", "expires", "transfers"]
										}
									},
									"required": ["allocatorData", "batchTransferDetails"],
									"description": "Successfully retrieved a compact batch withdrawal signature"
								}
							}
						}
					},
					"400": {
						"description": "400",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message for invalid request parameters",
											"example": "Invalid user address format"
										}
									},
									"required": ["error"],
									"description": "Invalid request parameters"
								}
							}
						}
					},
					"500": {
						"description": "500",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message describing the server-side issue",
											"example": "An unknown error occurred"
										}
									},
									"required": ["error"],
									"description": "Server error"
								}
							}
						}
					}
				}
			}
		},
		"/accounts/{userAddress}/portfolio": {
			"get": {
				"description": "Retrieves the token balances across all supported chains for a user's abstracted account",
				"summary": "Get User Portfolio",
				"tags": ["Portfolio"],
				"parameters": [
					{
						"name": "userAddress",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
						},
						"description": "Ethereum address of the user account"
					},
					{
						"name": "x-api-key",
						"in": "header",
						"schema": {
							"type": "string",
							"description": "Rhinestone API key"
						}
					},
					{
						"name": "chainIds",
						"in": "query",
						"description": "Comma-separated list of chain IDs to filter by",
						"schema": {
							"type": "string",
							"example": "1,10,137"
						}
					},
					{
						"name": "tokens",
						"in": "query",
						"description": "Comma-separated list of chain:token pairs to filter by",
						"schema": {
							"type": "string",
							"example": "1:0xa0B86A33e6441B8C4505B8C4505b8C4505B8C4505B8C450,10:0xb0b86a33E6441b8C4505b8C4505b8C4505B8C4505B8C450"
						}
					},
					{
						"name": "filterEmpty",
						"in": "query",
						"description": "Whether to filter out tokens with zero balance",
						"schema": {
							"default": "false",
							"type": "string",
							"example": "true"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"portfolio": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"tokenName": {
														"type": "string",
														"description": "Name of the token",
														"example": "USD Coin"
													},
													"tokenDecimals": {
														"type": "number",
														"minimum": 0,
														"description": "Number of decimal places for the token",
														"example": 6
													},
													"balance": {
														"type": "object",
														"properties": {
															"locked": {
																"type": "integer",
																"format": "int64",
																"description": "Total balance across all chains (as string to handle BigInt)",
																"example": "1000000"
															},
															"unlocked": {
																"type": "integer",
																"format": "int64",
																"description": "Total balance across all chains (as string to handle BigInt)",
																"example": "1000000"
															}
														},
														"required": ["locked", "unlocked"]
													},
													"tokenChainBalance": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"chainId": {
																	"type": "number",
																	"minimum": 0,
																	"description": "Chain ID where the token balance exists",
																	"example": 1
																},
																"tokenAddress": {
																	"type": "string",
																	"description": "Token contract address on this chain",
																	"example": "0xa0B86A33e6441B8C4505B8C4505b8C4505B8C450"
																},
																"balance": {
																	"type": "object",
																	"properties": {
																		"locked": {
																			"type": "integer",
																			"format": "int64",
																			"description": "Token balance on this specific chain (as string to handle BigInt)",
																			"example": "500000"
																		},
																		"unlocked": {
																			"type": "integer",
																			"format": "int64",
																			"description": "Token balance on this specific chain (as string to handle BigInt)",
																			"example": "500000"
																		}
																	},
																	"required": ["locked", "unlocked"]
																}
															},
															"required": ["chainId", "tokenAddress", "balance"]
														},
														"description": "Array of token balances per chain"
													}
												},
												"required": [
													"tokenName",
													"tokenDecimals",
													"balance",
													"tokenChainBalance"
												]
											},
											"description": "Array of token portfolio entries"
										}
									},
									"required": ["portfolio"],
									"description": "Successfully retrieved user portfolio"
								},
								"examples": {
									"Single Token": {
										"summary": "Portfolio with single token",
										"value": {
											"portfolio": [
												{
													"tokenName": "USDC",
													"tokenDecimals": 16,
													"balance": {
														"locked": "1000000000000000000",
														"unlocked": "1000000000000000000"
													},
													"tokenChainBalance": [
														{
															"chainId": 10,
															"tokenAddress": "0x0b2c639c533813f4aa9d7837caf62653d097ff85",
															"balance": {
																"locked": "1000000000000000000",
																"unlocked": "1000000000000000000"
															}
														}
													]
												}
											]
										}
									},
									"Multiple Tokens": {
										"summary": "Portfolio with multiple tokens across chains",
										"value": {
											"portfolio": [
												{
													"tokenName": "USDC",
													"balance": "2000000000000000000",
													"tokenChainBalance": [
														{
															"chainId": 10,
															"tokenAddress": "0x0b2c639c533813f4aa9d7837caf62653d097ff85",
															"balance": "1000000000000000000"
														},
														{
															"chainId": 8453,
															"tokenAddress": "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913",
															"balance": "1000000000000000000"
														}
													]
												},
												{
													"tokenName": "WETH",
													"balance": "2000000",
													"tokenChainBalance": [
														{
															"chainId": 10,
															"tokenAddress": "0x4200000000000000000000000000000000000006",
															"balance": "1000000"
														},
														{
															"chainId": 8453,
															"tokenAddress": "0x4200000000000000000000000000000000000006",
															"balance": "1000000"
														}
													]
												}
											]
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "400",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message for invalid request parameters",
											"example": "Invalid user address format"
										}
									},
									"required": ["error"],
									"description": "Invalid request parameters"
								}
							}
						}
					},
					"500": {
						"description": "500",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message describing the server-side issue",
											"example": "An unknown error occurred"
										}
									},
									"required": ["error"],
									"description": "Server error"
								}
							}
						}
					}
				}
			}
		},
		"/intent-operations": {
			"post": {
				"description": "Submit signed intent operations for processing. This endpoint accepts signed intent operations containing cross-chain token transfers and executions.",
				"summary": "Submit Intent Operations",
				"tags": [],
				"parameters": [
					{
						"name": "x-api-key",
						"in": "header",
						"schema": {
							"type": "string",
							"description": "Rhinestone API key"
						}
					}
				],
				"requestBody": {
					"description": "Body",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"signedIntentOp": {
										"type": "object",
										"properties": {
											"sponsor": {
												"type": "string",
												"description": "Address sponsoring the transaction",
												"example": "0x8a310b9085faF5d9464D84C3d9a7BE3b28c94531"
											},
											"nonce": {
												"type": "integer",
												"format": "int64",
												"description": "Transaction nonce",
												"example": "0"
											},
											"expires": {
												"type": "integer",
												"format": "int64",
												"description": "Expiration timestamp",
												"example": "1733493192"
											},
											"elements": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"arbiter": {
															"type": "string",
															"description": "Arbiter address for the element",
															"example": "0x8a310b9085faF5d9464D84C3d9a7BE3b28c94531"
														},
														"chainId": {
															"type": "integer",
															"format": "int64",
															"description": "Chain ID where the element is executed",
															"example": "1"
														},
														"idsAndAmounts": {
															"description": "Array of [tokenId, amount] pairs",
															"example": [["1", "1000000"], ["2", "2000000"]]
														},
														"spendTokens": {
															"description": "Array of [tokenId, amount] pairs that were effectively used as resource locks",
															"example": [["1", "1000000"], ["2", "2000000"]]
														},
														"mandate": {
															"type": "object",
															"properties": {
																"recipient": {
																	"type": "string",
																	"description": "Recipient address for the mandate",
																	"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																},
																"tokenOut": {
																	"description": "Array of [tokenId, amount] pairs for output tokens",
																	"example": [
																		["1", "1000000"],
																		["2", "2000000"]
																	]
																},
																"destinationChainId": {
																	"type": "integer",
																	"format": "int64",
																	"description": "Target chain ID for the mandate",
																	"example": 8453
																},
																"fillDeadline": {
																	"type": "integer",
																	"format": "int64",
																	"description": "Deadline timestamp for filling the mandate",
																	"example": "1733493192"
																},
																"preClaimOps": {
																	"description": "Array of executions to perform before claiming"
																},
																"destinationOps": {
																	"description": "Array of executions to perform on the target chain"
																},
																"qualifier": {
																	"type": "object",
																	"properties": {
																		"settlementContext": {
																			"type": "object",
																			"properties": {
																				"settlementLayer": {
																					"type": "string",
																					"enum": [
																						"SAME_CHAIN",
																						"ACROSS",
																						"ECO",
																						"RELAY"
																					],
																					"description": "Settlement layer for the qualifier",
																					"example": "ACROSS"
																				},
																				"usingJIT": {
																					"type": "boolean",
																					"description": "Whether to use JIT for the qualifier. Only valid for ACROSS and SAME_CHAIN",
																					"example": true
																				},
																				"using7579": {
																					"type": "boolean",
																					"description": "Whether to use 7579 for the qualifier. Only valid for ACROSS",
																					"example": true
																				},
																				"requestId": {
																					"type": "string",
																					"description": "Relay settlement layer metadata to be broadcasted"
																				}
																			},
																			"required": ["settlementLayer"]
																		},
																		"encodedVal": {
																			"type": "string",
																			"pattern": "^0x[a-fA-F0-9]*$",
																			"description": "Encoded qualification value",
																			"example": "0x..."
																		}
																	},
																	"required": [
																		"settlementContext",
																		"encodedVal"
																	],
																	"description": "Qualification data for the mandate"
																},
																"v": {
																	"type": "number",
																	"description": "Validation mode identifier"
																},
																"minGas": {
																	"type": "integer",
																	"format": "int64",
																	"description": "Mininimum gas for preclaim ops"
																}
															},
															"required": [
																"recipient",
																"tokenOut",
																"destinationChainId",
																"fillDeadline",
																"preClaimOps",
																"destinationOps",
																"qualifier",
																"v",
																"minGas"
															],
															"description": "Mandate containing execution details"
														},
														"beforeFill": {
															"type": "boolean"
														}
													},
													"required": [
														"arbiter",
														"chainId",
														"idsAndAmounts",
														"spendTokens",
														"mandate"
													]
												},
												"description": "Array of execution elements"
											},
											"serverSignature": {
												"type": "string",
												"pattern": "^[0-9a-f]{64}$",
												"description": "Intent operation HMAC digest",
												"example": "0x..."
											},
											"signedMetadata": {
												"type": "object",
												"properties": {
													"fees": {
														"type": "object",
														"properties": {
															"protocolFees": {
																"type": "object",
																"additionalProperties": {
																	"type": "integer",
																	"format": "int64"
																},
																"description": "Protocol fees for the intent",
																"example": {
																	"0x8a310b9085faF5d9464D84C3d9a7BE3b28c94531": 1000000000000000000
																}
															},
															"sponsorFee": {
																"type": "object",
																"properties": {
																	"relayer": {
																		"type": "number",
																		"description": "Relayer fee for the intent",
																		"example": 0.01
																	},
																	"protocol": {
																		"type": "number",
																		"description": "Protocol fee for the intent",
																		"example": 0.01
																	}
																},
																"description": "Sponsor fee for the intent",
																"example": {
																	"relayer": 0.01,
																	"protocol": 0.01
																}
															}
														}
													},
													"tokenPrices": {
														"type": "object",
														"additionalProperties": {
															"type": "number"
														},
														"description": "Token prices in USD",
														"example": {
															"USDC": 1,
															"WETH": 2000
														}
													},
													"gasPrices": {
														"type": "object",
														"additionalProperties": {
															"type": "integer",
															"format": "int64"
														},
														"description": "Gas prices per chain in wei",
														"example": {
															"1": "20000000000",
															"10": "1000000000"
														}
													},
													"opGasParams": {
														"nullable": true,
														"description": "Optimism network gas parameters per chain",
														"example": {
															"10": {
																"l1BaseFee": "100",
																"l1BlobBaseFee": "100",
																"baseFeeScalar": "100",
																"blobFeeScalar": "100"
															}
														}
													},
													"account": {
														"type": "object",
														"properties": {
															"address": {
																"type": "string",
																"description": "Smart account address",
																"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
															},
															"accountType": {
																"type": "string",
																"description": "Smart account type"
															},
															"setupOps": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"to": {
																			"type": "string",
																			"description": "Account deployment factory address",
																			"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																		},
																		"data": {
																			"type": "string",
																			"pattern": "^0x[a-fA-F0-9]*$",
																			"description": "Account deployment data",
																			"example": "0x..."
																		}
																	},
																	"required": ["to", "data"]
																},
																"description": "Setup operations for the smart account"
															},
															"emissaryConfig": {
																"type": "object",
																"properties": {
																	"configId": {
																		"type": "number",
																		"maximum": 255,
																		"description": "Unique identifier for the emissary configuration",
																		"example": "42"
																	},
																	"validatorAddress": {
																		"type": "string",
																		"description": "Address of the validator contract",
																		"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																	},
																	"emissaryAddress": {
																		"type": "string",
																		"description": "Address of the emissary contract",
																		"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																	},
																	"emissaryEnable": {
																		"type": "object",
																		"properties": {
																			"allocatorSig": {
																				"type": "string",
																				"pattern": "^0x[a-fA-F0-9]*$",
																				"description": "Signature of the allocator",
																				"example": "0x..."
																			},
																			"userSig": {
																				"type": "string",
																				"pattern": "^0x[a-fA-F0-9]*$",
																				"description": "Signature of the user",
																				"example": "0x..."
																			},
																			"expires": {
																				"type": "integer",
																				"format": "int64",
																				"description": "Expiration timestamp",
																				"example": "1733493192"
																			},
																			"nonce": {
																				"type": "integer",
																				"format": "int64",
																				"description": "Nonce",
																				"example": "0"
																			},
																			"allChainIds": {},
																			"chainIndex": {
																				"type": "integer",
																				"format": "int64",
																				"description": "Chain index",
																				"example": "0"
																			}
																		},
																		"required": [
																			"allocatorSig",
																			"userSig",
																			"expires",
																			"nonce",
																			"allChainIds",
																			"chainIndex"
																		],
																		"description": "Emissary enable data",
																		"example": {
																			"allocatorSig": "0x...",
																			"userSig": "0x..."
																		}
																	},
																	"emissaryConfig": {
																		"type": "object",
																		"properties": {
																			"allocator": {
																				"default": "0x064d52ee04da194f26c8faf7b5e455c842fa70db",
																				"type": "string",
																				"description": "Address of the allocator",
																				"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																			},
																			"scope": {
																				"default": 0,
																				"type": "number",
																				"description": "Scope of the emissary",
																				"example": 1
																			},
																			"resetPeriod": {
																				"default": 6,
																				"type": "number",
																				"description": "Reset period of the emissary",
																				"example": 1
																			},
																			"validator": {
																				"type": "string",
																				"description": "Address of the validator",
																				"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																			},
																			"validatorConfig": {
																				"type": "string",
																				"pattern": "^0x[a-fA-F0-9]*$",
																				"description": "Validator configuration",
																				"example": "0x..."
																			}
																		},
																		"required": [
																			"validator",
																			"validatorConfig"
																		],
																		"description": "Emissary configuration",
																		"example": {
																			"allocator": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
																		}
																	}
																},
																"required": [
																	"configId",
																	"validatorAddress",
																	"emissaryAddress",
																	"emissaryEnable",
																	"emissaryConfig"
																],
																"description": "Emissary configuration for the smart account"
															},
															"accountContext": {
																"type": "object",
																"additionalProperties": {
																	"discriminator": {
																		"propertyName": "accountType"
																	},
																	"oneOf": [
																		{
																			"type": "object",
																			"properties": {
																				"accountType": {
																					"type": "string",
																					"enum": ["eoa"],
																					"description": "Type of the account",
																					"example": "eoa"
																				}
																			},
																			"required": ["accountType"],
																			"additionalProperties": false
																		},
																		{
																			"type": "object",
																			"properties": {
																				"accountType": {
																					"type": "string",
																					"enum": ["smartAccount"],
																					"description": "Type of the account",
																					"example": "smartAccount"
																				},
																				"isDeployed": {
																					"type": "boolean",
																					"description": "Whether the account is deployed on this chain",
																					"example": true
																				},
																				"isERC7579": {
																					"type": "boolean",
																					"description": "Whether the account supports ERC7579 standard",
																					"example": true
																				},
																				"erc7579AccountType": {
																					"type": "string",
																					"enum": [
																						"Safe",
																						"Kernel",
																						"Nexus",
																						"Prime"
																					],
																					"description": "Type of ERC7579 account",
																					"example": "Safe"
																				},
																				"erc7579AccountVersion": {
																					"type": "string",
																					"description": "Version of the ERC7579 account",
																					"example": "1.0.0"
																				}
																			},
																			"required": [
																				"accountType",
																				"isDeployed",
																				"isERC7579"
																			],
																			"additionalProperties": false
																		}
																	]
																},
																"description": "Account status per chain"
															},
															"requiredDelegations": {
																"type": "object",
																"additionalProperties": {
																	"type": "object",
																	"properties": {
																		"contract": {
																			"type": "string",
																			"description": "address of contract to which delegation on behalf of sponsor will be assumed for given chain ID"
																		}
																	},
																	"required": ["contract"]
																},
																"description": "Map of chain -> EOA and delegated address required for user to sign for 7702 authorizations"
															}
														},
														"required": [
															"address",
															"accountType",
															"accountContext"
														]
													},
													"quotes": {
														"nullable": true
													}
												},
												"required": ["tokenPrices", "gasPrices", "account"],
												"description": "Signed metadata containing prices, fees, and gas parameters"
											},
											"signedAuthorizations": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"chainId": {
															"type": "number",
															"description": "Chain ID for EIP-7702 delegation, 0 means it can be applied to any chain",
															"example": 8453
														},
														"address": {
															"type": "string",
															"description": "Address of the delegate for EIP-7702 delegation",
															"example": "0x579d5631f76126991c00fb8fe5467fa9d49e5f6a"
														},
														"nonce": {
															"type": "number",
															"description": "Nonce for EIP-7702 delegation",
															"example": "0"
														},
														"yParity": {
															"type": "number",
															"description": "Y parity for EIP-7702 delegation",
															"example": 27
														},
														"r": {
															"type": "string",
															"pattern": "^0x[a-fA-F0-9]*$",
															"description": "R value for EIP-7702 delegation",
															"example": "0x..."
														},
														"s": {
															"type": "string",
															"pattern": "^0x[a-fA-F0-9]*$",
															"description": "S value for EIP-7702 delegation",
															"example": "0x..."
														}
													},
													"required": [
														"chainId",
														"address",
														"nonce",
														"yParity",
														"r",
														"s"
													]
												},
												"description": "List of 7702 authorizations signed by EOA matching sponsor"
											},
											"destinationSignature": {
												"type": "string",
												"pattern": "^0x[a-fA-F0-9]*$",
												"description": "Target signature",
												"example": "0x..."
											},
											"originSignatures": {
												"type": "array",
												"items": {
													"type": "string",
													"pattern": "^0x[a-fA-F0-9]*$"
												},
												"description": "Origin signatures",
												"example": ["0x...", "0x..."]
											},
											"options": {
												"type": "object",
												"properties": {
													"dryRun": {
														"type": "boolean"
													}
												}
											}
										},
										"required": [
											"sponsor",
											"nonce",
											"expires",
											"elements",
											"serverSignature",
											"signedMetadata",
											"destinationSignature",
											"originSignatures"
										]
									}
								},
								"required": ["signedIntentOp"]
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "201",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"result": {
											"oneOf": [
												{
													"type": "object",
													"properties": {
														"id": {
															"type": "integer",
															"format": "int64",
															"description": "Nonce of the bundle, used as identifier"
														},
														"status": {
															"type": "string",
															"enum": ["PENDING"],
															"description": "Status of the intent operation"
														}
													},
													"required": ["id", "status"]
												},
												{
													"type": "object",
													"properties": {
														"id": {
															"type": "integer",
															"format": "int64",
															"description": "Nonce of the bundle, used as identifier"
														},
														"status": {
															"type": "string",
															"enum": ["FAILED"],
															"description": "Status of the intent operation"
														},
														"error": {
															"oneOf": [
																{
																	"type": "object",
																	"properties": {
																		"success": {
																			"type": "boolean",
																			"enum": [true]
																		},
																		"chainId": {
																			"type": "number",
																			"minimum": 0
																		},
																		"gasEstimation": {
																			"type": "string"
																		}
																	},
																	"required": [
																		"success",
																		"chainId",
																		"gasEstimation"
																	]
																},
																{
																	"type": "object",
																	"properties": {
																		"success": {
																			"type": "boolean",
																			"enum": [false]
																		},
																		"call": {
																			"type": "object",
																			"properties": {
																				"to": {
																					"type": "string"
																				},
																				"value": {
																					"type": "integer",
																					"format": "int64"
																				},
																				"data": {
																					"type": "string",
																					"pattern": "^0x[a-fA-F0-9]*$"
																				},
																				"chainId": {
																					"type": "number",
																					"minimum": 0
																				}
																			},
																			"required": [
																				"to",
																				"value",
																				"data",
																				"chainId"
																			]
																		},
																		"details": {
																			"type": "object",
																			"properties": {
																				"blockNumber": {
																					"type": "integer",
																					"format": "int64"
																				},
																				"relayer": {
																					"type": "string"
																				},
																				"simulationUrl": {
																					"type": "string"
																				}
																			},
																			"required": ["blockNumber", "relayer"]
																		}
																	},
																	"required": ["success", "call", "details"]
																}
															],
															"description": "Error details for failed bundles"
														}
													},
													"required": ["id", "status", "error"]
												},
												{
													"type": "object",
													"properties": {
														"id": {
															"type": "integer",
															"format": "int64",
															"description": "Nonce of the bundle, used as identifier"
														},
														"status": {
															"type": "string",
															"enum": ["FAILED"],
															"description": "Status of the intent operation"
														},
														"simulations": {
															"type": "array",
															"items": {
																"oneOf": [
																	{
																		"type": "object",
																		"properties": {
																			"success": {
																				"type": "boolean",
																				"enum": [true]
																			},
																			"chainId": {
																				"type": "number",
																				"minimum": 0
																			},
																			"gasEstimation": {
																				"type": "string"
																			}
																		},
																		"required": [
																			"success",
																			"chainId",
																			"gasEstimation"
																		]
																	},
																	{
																		"type": "object",
																		"properties": {
																			"success": {
																				"type": "boolean",
																				"enum": [false]
																			},
																			"call": {
																				"type": "object",
																				"properties": {
																					"to": {
																						"type": "string"
																					},
																					"value": {
																						"type": "integer",
																						"format": "int64"
																					},
																					"data": {
																						"type": "string",
																						"pattern": "^0x[a-fA-F0-9]*$"
																					},
																					"chainId": {
																						"type": "number",
																						"minimum": 0
																					}
																				},
																				"required": [
																					"to",
																					"value",
																					"data",
																					"chainId"
																				]
																			},
																			"details": {
																				"type": "object",
																				"properties": {
																					"blockNumber": {
																						"type": "integer",
																						"format": "int64"
																					},
																					"relayer": {
																						"type": "string"
																					},
																					"simulationUrl": {
																						"type": "string"
																					}
																				},
																				"required": ["blockNumber", "relayer"]
																			}
																		},
																		"required": ["success", "call", "details"]
																	}
																]
															}
														}
													},
													"required": ["id", "status", "simulations"]
												}
											],
											"description": "Results of bundle submissions"
										}
									},
									"required": ["result"],
									"description": "Intent operations submitted successfully"
								}
							}
						}
					},
					"400": {
						"description": "400",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message for invalid request parameters",
											"example": "Invalid bundle format"
										}
									},
									"required": ["error"],
									"description": "Invalid request parameters"
								}
							}
						}
					},
					"500": {
						"description": "500",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message describing the server-side issue",
											"example": "An unknown error occurred"
										}
									},
									"required": ["error"],
									"description": "Server error"
								}
							}
						}
					}
				}
			}
		},
		"/intent-operation/{id}": {
			"get": {
				"description": "Retrieve the status of a specific intent operation along with the status of each operation within the intent.",
				"summary": "Get Intent Operation",
				"tags": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"required": true,
						"schema": {
							"type": "string",
							"pattern": "^\\d+$",
							"example": "77119256265773742309930654065362693497375232736834856992878277299604179621015"
						},
						"description": "Unique identifier of the intent operation"
					},
					{
						"name": "x-api-key",
						"in": "header",
						"schema": {
							"type": "string",
							"description": "Rhinestone API key"
						}
					}
				],
				"responses": {
					"200": {
						"description": "200",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"status": {
											"type": "string",
											"enum": [
												"PENDING",
												"PRECONFIRMED",
												"CLAIMED",
												"FILLED",
												"COMPLETED",
												"FAILED",
												"EXPIRED"
											],
											"description": "Overall status of the intent operation"
										},
										"fillTimestamp": {
											"type": "number",
											"description": "Timestamp of the fill transaction",
											"example": 1633493192
										},
										"fillTransactionHash": {
											"type": "string",
											"description": "Transaction hash of the fill transaction",
											"example": "0xc1674f4671accbceec3f22c2c9cfa4f7aead7183f48df90c239e0d85d6c31e21"
										},
										"claims": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"chainId": {
														"type": "number",
														"description": "Chain ID of the claim",
														"example": 10
													},
													"status": {
														"type": "string",
														"enum": [
															"PENDING",
															"EXPIRED",
															"PRECONFIRMED",
															"COMPLETED",
															"FAILED"
														],
														"description": "Status of individual claim",
														"example": "PENDING"
													},
													"claimTimestamp": {
														"type": "number",
														"description": "Timestamp when the claim was processed"
													},
													"claimTransactionHash": {
														"type": "string",
														"description": "Transaction hash of the claim transaction"
													}
												},
												"required": ["chainId", "status"]
											},
											"description": "Array of claims within the intent"
										}
									},
									"required": ["status", "claims"],
									"description": "Successfully retrieved intent operation status"
								}
							}
						}
					},
					"400": {
						"description": "400",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message for invalid intent ID format",
											"example": "Intent ID must be numeric"
										}
									},
									"required": ["error"],
									"description": "Invalid ntent ID"
								}
							}
						}
					},
					"500": {
						"description": "500",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"error": {
											"type": "string",
											"description": "Error message describing the server-side issue",
											"example": "An unknown error occurred"
										}
									},
									"required": ["error"],
									"description": "Server error"
								}
							}
						}
					}
				}
			}
		}
	},
	"info": {
		"title": "Rhinestone Orchestrator API",
		"version": "1.0.0"
	},
	"servers": [
		{
			"url": "https://v1.orchestrator.rhinestone.dev"
		}
	],
	"components": {
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer"
			}
		}
	}
}
